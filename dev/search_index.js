var documenterSearchIndex = {"docs":
[{"location":"C4Blade/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"C4Blade/api/","page":"API Reference","title":"API Reference","text":"Pages = [\"C4Blade/api.md\"]\nDepth = 5","category":"page"},{"location":"C4Blade/intro/#C\\textrm{4}Blade-[[C](#)ascade-[C](#)ompatible-[CCBlade](https://flow.byu.edu/CCBlade.jl/stable/)]","page":"Intro","title":"C^textrm4Blade [Cascade Compatible CCBlade]","text":"","category":"section"},{"location":"C4Blade/intro/","page":"Intro","title":"Intro","text":"C^4Blade is a DuctAPE submodule containing a modified version of CCBlade that includes capabilities for cascade types.","category":"page"},{"location":"DuctAPE/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]\nDepth = 5","category":"page"},{"location":"DuctAPE/api/#Public-API","page":"API Reference","title":"Public API","text":"","category":"section"},{"location":"DuctAPE/api/#Options","page":"API Reference","title":"Options","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.set_options\nDuctAPE.DFDC_options","category":"page"},{"location":"DuctAPE/api/#DuctAPE.set_options","page":"API Reference","title":"DuctAPE.set_options","text":"set_options(; kwargs...)\nset_options(multipoint; kwargs...)\n\nSet the options for DuctAPE to use.\n\nNote that the vast majority of the available options are defined through keyword arguments.  See the documentation for the various option types for more information.\n\nArguments\n\nmultipoint::AbstractVector{OperatingPoint} : a vector of operating points to use if running a multi-point analysis.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.DFDC_options","page":"API Reference","title":"DuctAPE.DFDC_options","text":"function DFDC_options(;\n    grid_solver_options=SLORGridSolverOptions(),\n    solver_options=CSORSolverOptions(),\n    kwargs...,\n)\n\nConvenience function to select options used in DFDC.\n\nArguments\n\ngrid_solver_options=SLORGridSolverOptions() : elliptic grid solver options\nsolver_options=CSORSolverOptions() : solver options\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Setup","page":"API Reference","title":"Setup","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.setup_analysis","category":"page"},{"location":"DuctAPE/api/#DuctAPE.setup_analysis","page":"API Reference","title":"DuctAPE.setup_analysis","text":"setup_analysis(\n    propulsor::Propulsor,\n    options::Options=set_options();\n    prepost_container_caching=nothing,\n    solve_parameter_caching=nothing,\n    solve_container_caching=nothing,\n)\n\nPerform pre-processing and cache setup (as needed) for propuslor analysis.\n\nArguments\n\npropulsor::Propulsor : Propulsor input object (see docstring for Propulsor type)\noptions::Options=set_options() : Options object (see set_options and related functions)\n\nKeyword Arguments\n\nprepost_container_caching=nothing : Output of allocate_prepost_container_cache\nsolve_parameter_caching=nothing : Output of allocate_solve_parameter_container_cache\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\n\nReturns\n\nproblem_dimensions::NamedTuple : Named Tuple contiaining bookkeeping information (problem dimensions)\nprepost_containers::NamedTuple : Named Tuple containing reshaped views into the prepost cache\nsolve_parameter_cache_vector::Vector : Vector containing the relevant typed cache vector of solve parameters\nsolve_parameter_cache_dims::NamedTuple : Named Tuple containing dimensions used for reshaping the solve parameter cache\nivb::NamedTuple : NamedTuple containing the unit induced velocities on the body\nA_bb_LU::LinearAlgebra.LU : The LU factorization of the AIC matrix used in the panel method\nlu_decomp_flag::Bool : flag indicating if the LU decomposition was successful\nairfoils::Matrix{AFType} : Matrix contiaining the blade element airfoil polar objects\nidmaps::NamedTuple : Named Tuple containing bookkeeping information (index mappings)\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Analysis","page":"API Reference","title":"Analysis","text":"","category":"section"},{"location":"DuctAPE/api/#Private-API","page":"API Reference","title":"Private API","text":"","category":"section"},{"location":"DuctAPE/api/#Bookkeeping","page":"API Reference","title":"Bookkeeping","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.get_problem_dimensions","category":"page"},{"location":"DuctAPE/api/#DuctAPE.get_problem_dimensions","page":"API Reference","title":"DuctAPE.get_problem_dimensions","text":"get_problem_dimensions(paneling_constants::PanelingConstants)\nget_problem_dimensions(body_vortex_panels, rotor_source_panels, wake_vortex_panels)\n\nDetermine all relevant dimensions to the problem based either on the paneling_constants or the panels themselves.\n\nArguments\n\npaneling_constants::PanelingConstants : Rotor (and possibly stator) geometric paramters.\n\nReturns\n\nproblem_dimensions::ProblemDimensions : ProblemDimensions object.\n\n\n\n\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Caching","page":"API Reference","title":"Caching","text":"","category":"section"},{"location":"DuctAPE/api/#Allocation","page":"API Reference","title":"Allocation","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"The following are various helper functions used in preallocating the various caches.","category":"page"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.allocate_wake_panel_container!\nDuctAPE.allocate_panel_containers!\nDuctAPE.allocate_panel_container!\nDuctAPE.allocate_body_panel_container!\nDuctAPE.allocate_rotor_panel_container!\nDuctAPE.allocate_solve_parameter_extras!","category":"page"},{"location":"DuctAPE/api/#DuctAPE.allocate_wake_panel_container!","page":"API Reference","title":"DuctAPE.allocate_wake_panel_container!","text":"allocate_wake_panel_containers!(total_length, problem_dimensions::ProblemDimensions)\n\nA helper function is assembling the prepostcontainercache.\n\nArguments\n\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nReturns\n\nwake_vortex_panels::NamedTuple : A named containing the dimensions needed to reshape the cache with regards to the wake vortex panel object\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.allocate_panel_containers!","page":"API Reference","title":"DuctAPE.allocate_panel_containers!","text":"allocate_panel_containers!(total_length, problem_dimensions::ProblemDimensions)\n\nA helper function is assembling the prepostcontainercache.\n\nArguments\n\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nReturns\n\npanels::NamedTuple : A named tuple of named tuples containing the dimensions needed to reshape the cache with regards to the panel objects\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.allocate_panel_container!","page":"API Reference","title":"DuctAPE.allocate_panel_container!","text":"allocate_panel_container!(total_length, nn, np, tn, tp, nb)\n\nA helper function is assembling the prepostcontainercache.\n\nArguments\n\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\nnn::Int : number of nodes in each body, rotor, or wake sheet\nnp::Int : number of panels in each body, rotor, or wake sheet\ntn::Int : number of total nodes among the bodies, rotors, or wake sheets\ntp::Int : number of total panels among the bodies, rotors, or wake sheets\nnb::Int : number of bodies, rotors, or wake sheets\n\nReturns\n\npanel::NamedTuple : A named containing the dimensions needed to reshape the cache with regards to an arbitrary panel set\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.allocate_body_panel_container!","page":"API Reference","title":"DuctAPE.allocate_body_panel_container!","text":"allocate_body_panel_containers!(total_length, problem_dimensions::ProblemDimensions)\n\nA helper function is assembling the prepostcontainercache.\n\nArguments\n\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nReturns\n\nbody_vortex_panels::NamedTuple : A named tuple containing the dimensions needed to reshape the cache with regards to the body vortex panel object\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.allocate_rotor_panel_container!","page":"API Reference","title":"DuctAPE.allocate_rotor_panel_container!","text":"allocate_rotor_panel_containers!(total_length, problem_dimensions::ProblemDimensions)\n\nA helper function is assembling the prepostcontainercache.\n\nArguments\n\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nReturns\n\nrotor_source_panels::NamedTuple : A named containing the dimensions needed to reshape the cache with regards to the rotor source panel object\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.allocate_solve_parameter_extras!","page":"API Reference","title":"DuctAPE.allocate_solve_parameter_extras!","text":"allocate_solve_parameter_extras!(\n    solver_options::SolverOptionsType, input_length, total_length\n)\n\nIncludes additional caching for various solvers.  Currently only does anything for SIAMFANLEOptions types.\n\nArguments\n\ninput_length::Int : the number of state variables in the solver\ntotal_length::Vector{Int} : a one-element vector used to store the total length in order to know how large of a cache to allocate.  Is updated in place.\n\nReturns\n\nsolve_parameter_extras::NamedTuple : A named tuple containing dimensions related to extra caching parameters used in various solvers.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Reshaping","page":"API Reference","title":"Reshaping","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"The following are used internally to reshape the cache vectors into more usable formats.","category":"page"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.withdraw_prepost_container_cache\nDuctAPE.withdraw_solve_parameter_cache\nDuctAPE.withdraw_solve_container_cache","category":"page"},{"location":"DuctAPE/api/#DuctAPE.withdraw_prepost_container_cache","page":"API Reference","title":"DuctAPE.withdraw_prepost_container_cache","text":"withdraw_prepost_container_cache(vec, dims)\n\nReshape the prepost cache vector using the saved dimensions tuple.\n\nArguments\n\nvec::Vector{Float} : vector cache of pre- and post-processing intermediate containers.\ndims::NamedTuple : Named tuple containing the indices and shape of the various items stored in the cache vector.\n\nReturns\n\nprepost_container_caching::NamedTuple : Named tuple containing reshaped views of sections of the cache vector.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.withdraw_solve_parameter_cache","page":"API Reference","title":"DuctAPE.withdraw_solve_parameter_cache","text":"withdraw_solve_parameter_cache(solver_options::SolverOptionsType, vec, dims)\n\nReshape the solve parameter cache vector using the saved dimensions tuple.\n\nArguments\n\nsolver_options::SolverOptionsType : Solver options type for dispatch.\nvec::Vector{Float} : vector cache of pre- and post-processing intermediate containers.\ndims::NamedTuple : Named tuple containing the indices and shape of the various items stored in the cache vector.\n\nReturns\n\nsolve_parameter_caching::NamedTuple : Named tuple containing reshaped views of sections of the cache vector.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#DuctAPE.withdraw_solve_container_cache","page":"API Reference","title":"DuctAPE.withdraw_solve_container_cache","text":"withdraw_solve_container_cache(solver_options::SolverOptionsType, vec, dims)\n\nReshape the intermediate solve container cache vector using the saved dimensions tuple.\n\nArguments\n\nsolver_options::SolverOptionsType : Solver options type for dispatch.\nvec::Vector{Float} : vector cache of pre- and post-processing intermediate containers.\ndims::NamedTuple : Named tuple containing the indices and shape of the various items stored in the cache vector.\n\nReturns\n\nsolve_container_caching::NamedTuple : Named tuple containing reshaped views of sections of the cache vector.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Analysis-2","page":"API Reference","title":"Analysis","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.analyze","category":"page"},{"location":"DuctAPE/api/#DuctAPE.analyze","page":"API Reference","title":"DuctAPE.analyze","text":"analyze(\n    propulsor::Propulsor,\n    options::Options=set_options();\n    prepost_container_caching=nothing,\n    solve_parameter_caching=nothing,\n    solve_container_caching=nothing,\n    return_inputs=false,\n)\n\nAnalyze propulsor, including preprocessing.\n\nArguments\n\npropulsor::Propulsor : Propulsor input object (see docstring for Propulsor type)\noptions::Options=set_options() : Options object (see set_options and related functions)\n\nKeyword Arguments\n\nprepost_container_caching=nothing : Output of allocate_prepost_container_cache\nsolve_parameter_caching=nothing : Output of allocate_solve_parameter_container_cache\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\nreturn_inputs=false : flag as to whether or not to return the pre-processed inputs\n\nReturns\n\nouts::NamedTuple : Named Tuple of various analysis outputs (see docstring for postprocess for details), note, if linear system decomposition fails, no solve is performed and an empty vector is returned.\nins::NamedTuple : Named Tuple of various pre-processed inputs (e.g. panels and body linear system), will only be returned if return_inputs=true\nconvergence_flag : Flag for successful solve convergence\n\n\n\n\n\nanalyze(\n    propulsor::Propulsor,\n    prepost_containers,\n    solve_parameter_cache_vector,\n    solve_parameter_cache_dims,\n    airfoils,\n    ivb,\n    A_bb_LU,\n    idmaps,\n    problem_dimensions,\n    options::Options=set_options();\n    return_inputs=false,\n    solve_container_caching=nothing,\n)\n\nAnalyze propulsor, assuming setup_analysis has been called and the outputs thereof are being passed in here.\n\nArguments\n\npropulsor::Propulsor : Propulsor input object\nprepost_containers::NamedTuple : An output from setup_analysis containing reshaped views into the prepost cache\nsolve_parameter_cache_vector::Vector : An output from setup_analysis containing the relevant typed cache vector of solve parameters\nsolve_parameter_cache_dims::NamedTuple : An output from setup_analysis containing dimensions used for reshaping the solve parameter cache\nairfoils::Vector{AFType} : An output from setup_analysis contiaining the blade element airfoil polar objects\nivb::NamedTuple : An output from setup_analysis containing the unit induced velocities on the body\nA_bb_LU::LinearAlgebra.LU : An output from setup_analysis that is the LU decomposition of the AIC matrix used in the panel method\nidmaps::NamedTuple : An output from setup_analysis containing bookkeeping information (index mappings)\nproblem_dimensions::NamedTuple : An output from setup_analysis contiaining bookkeeping information (problem dimensions)\noptions::Options=set_options() : Options object\n\nKeyword Arguments\n\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\nreturn_inputs=false : flag as to whether or not to return the pre-processed inputs\n\nReturns\n\nouts::NamedTuple : Named Tuple of various analysis outputs (see docstring for postprocess for details), note, if linear system decomposition fails, no solve is performed and an empty vector is returned.\nins::NamedTuple : Named Tuple of various pre-processed inputs (e.g. panels and body linear system), will only be returned if return_inputs=true\nconvergence_flag : Flag for successful solve convergence\n\n\n\n\n\nanalyze(\n    multipoint::AbstractVector{OperatingPoint},\n    propulsor::Propulsor,\n    options::Options=set_options();\n    prepost_container_caching=nothing,\n    solve_parameter_caching=nothing,\n    solve_container_caching=nothing,\n    return_inputs=false,\n)\n\nAnalyze propulsor, including preprocessing, for a set of operating points.\n\nArguments\n\nmultipoint::AbstractVector{OperatingPoint} : Vector of Operating Points at which to analyze the propulsor (note that the operating point within the propulsor input will be overwritten with these)\npropulsor::Propulsor : Propulsor input object\noptions::Options=set_options() : Options object\n\nKeyword Arguments\n\nprepost_container_caching=nothing : Output of allocate_prepost_container_cache\nsolve_parameter_caching=nothing : Output of allocate_solve_parameter_container_cache\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\nreturn_inputs=false : flag as to whether or not to return the pre-processed inputs\n\nReturns\n\nouts::Vector{NamedTuple} : Vector of named tuples of various analysis outputs (see docstring for postprocess for details), note, if linear system decomposition fails, no solve is performed and an empty vector is returned.\nins::NamedTuple : Named Tuple of various pre-processed inputs (e.g. panels and body linear system), will only be returned if return_inputs=true\nconvergence_flag : Flag for successful solve convergence\n\n\n\n\n\nanalyze(\n    multipoint::Vector{OperatingPoint},\n    propulsor::Propulsor,\n    prepost_containers,\n    solve_parameter_cache_vector,\n    solve_parameter_cache_dims,\n    airfoils,\n    ivb,\n    A_bb_LU,\n    idmaps,\n    problem_dimensions,\n    options::Options=set_options();\n    return_inputs=false,\n    solve_container_caching=nothing,\n)\n\nAnalyze propulsor, assuming setup_analysis has been called and the inputs are being passed in here.\n\nArguments\n\nmultipoint::AbstractVector{OperatingPoint} : Vector of Operating Points at which to analyze the propulsor (note that the operating point within the propulsor input will be overwritten with these)\npropulsor::Propulsor : Propulsor input object\nprepost_containers::NamedTuple : An output from setup_analysis containing reshaped views into the prepost cache\nsolve_parameter_cache_vector::Vector : An output from setup_analysis containing the relevant typed cache vector of solve parameters\nsolve_parameter_cache_dims::NamedTuple : An output from setup_analysis containing dimensions used for reshaping the solve parameter cache\nairfoils::Vector{AFType} : An output from setup_analysis contiaining the blade element airfoil polar objects\nivb::NamedTuple : An output from setup_analysis containing the unit induced velocities on the body\nA_bb_LU::LinearAlgebra.LU : An output from setup_analysis that is the LU decomposition of the AIC matrix used in the panel method\nidmaps::NamedTuple : An output from setup_analysis containing bookkeeping information (index mappings)\nproblem_dimensions::NamedTuple : An output from setup_analysis contiaining bookkeeping information (problem dimensions)\noptions::Options=set_options() : Options object\n\nKeyword Arguments\n\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\nreturn_inputs=false : flag as to whether or not to return the pre-processed inputs\n\nReturns\n\nouts::Vector{NamedTuple} : Named Tuple of various analysis outputs (see docstring for postprocess for details), note, if linear system decomposition fails, no solve is performed and an empty vector is returned.\nins::NamedTuple : Named Tuple of various pre-processed inputs (e.g. panels and body linear system), will only be returned if return_inputs=true.  Note that some inputs will be overwritten (e.g. the linear system RHS components related to the freestream) and only those associated with the final operating point will be returned.\nconvergence_flag : Flag for successful solve convergence\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Post-process","page":"API Reference","title":"Post-process","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.post_process","category":"page"},{"location":"DuctAPE/api/#DuctAPE.post_process","page":"API Reference","title":"DuctAPE.post_process","text":"\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Convenience-Functions","page":"API Reference","title":"Convenience Functions","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"DuctAPE.promote_propulosor_type","category":"page"},{"location":"DuctAPE/api/#DuctAPE.promote_propulosor_type","page":"API Reference","title":"DuctAPE.promote_propulosor_type","text":"promote_propulosor_type(propulsor)\n\nConvenience function for promoting types based on any potential elements of the propulsor object dependent on optimization design variables.\n\nArguments\n\npropulsor::Propulsor : the propulsor input\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"DuctAPE/api/","page":"API Reference","title":"API Reference","text":"Modules=[DuctAPE, DuctAPE.C4Blade]","category":"page"},{"location":"C4Blade/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"DuctAPE/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"DuctAPE/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"DuctAPE/examples/#Advanced-Option-Selection","page":"Examples","title":"Advanced Option Selection","text":"","category":"section"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"(TODO: see src/utilities/options.jl)","category":"page"},{"location":"DuctAPE/examples/#Available-Outputs","page":"Examples","title":"Available Outputs","text":"","category":"section"},{"location":"DuctAPE/examples/#Returning-the-Pre-process-Objects","page":"Examples","title":"Returning the Pre-process Objects","text":"","category":"section"},{"location":"DuctAPE/examples/#Multi-Point-Analyses","page":"Examples","title":"Multi-Point Analyses","text":"","category":"section"},{"location":"DuctAPE/examples/#Pre-compiling-the-Caches","page":"Examples","title":"Pre-compiling the Caches","text":"","category":"section"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"There are several available caches that can be precompiled to help speed up multiple analyses. The first is a cache used for intermediate calculations in the pre- and post-processing phases of the analysis. It can be preallocated using allocate_prepost_container_cache","category":"page"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"DuctAPE.allocate_prepost_container_cache","category":"page"},{"location":"DuctAPE/examples/#DuctAPE.allocate_prepost_container_cache","page":"Examples","title":"DuctAPE.allocate_prepost_container_cache","text":"allocate_prepost_container_cache(paneling_constants::PanelingConstants)\nallocate_prepost_container_cache(problem_dimensions::ProblemDimensions)\n\nAllocate the pre- and post-processing cache (used for intermediate calculations) based on paneling constants or problem dimensions.\n\nArguments\n\npaneling_constants::PanelingConstants : a PanelingConstants object\n\nOR\n\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nReturns\n\nprepost_container_caching::NamedTuple : a Named Tuple containing:\nprepost_container_cache::PreallocationTools.DiffCache : the cache\nprepost_container_cache_dims::NamedTuple : a named tuple containing the dimensions used for reshaping the cache when needed.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"The second is a cache containing parameters used in the solver, in other words, the results of the pre-processing phase. It can be preallocated using allocate_solve_parameter_cache.","category":"page"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"DuctAPE.allocate_solve_parameter_cache","category":"page"},{"location":"DuctAPE/examples/#DuctAPE.allocate_solve_parameter_cache","page":"Examples","title":"DuctAPE.allocate_solve_parameter_cache","text":"allocate_solve_parameter_cache(\n    solve_type::SolverOptionsType,\n    paneling_constants::PanelingConstants;\n    fd_chunk_size=12,\n    levels=1,\n)\nallocate_solve_parameter_cache(\n    solve_type::SolverOptionsType,\n    problem_dimensions::ProblemDimensions;\n    fd_chunk_size=12,\n    levels=1\n)\n\nAllocate the solve parameter cache for parameters passed into the solver(s).\n\nArguments\n\nsolve_type::SolverOptionsType : Solver options type used for dispatch\npaneling_constants::PanelingConstants : a PanlingConstants object used for sizing\n\nOR\n\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object used for sizing\n\nKeyword Arguments\n\nfd_chunk_size::Int=12 : chunk size to use for PreallocationTools caches.  Note that the automated chuck size for DuctAPE will always be the ForwardDiff threshold of 12 due to the size of the system, so it will be best to leave this at the default unless further development allows for chunk size selection for individual solvers.\nlevels::Int=1 : levels for nested duals.  Note that since ImplicitAD is being used for all solves, there should be no need for more than 1 level.\n\nReturns\n\nsolve_parameter_caching::NamedTuple : a Named Tuple containing:\nsolve_parameter_cache::PreallocationTools.DiffCache : the cache\nsolve_parameter_cache_dims::NamedTuple : a named tuple containing the dimensions used for reshaping the cache when needed.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"The final precompileable cache is for intermediate calculations within the solve and can be preallocated using allocate_solve_container_cache","category":"page"},{"location":"DuctAPE/examples/","page":"Examples","title":"Examples","text":"DuctAPE.allocate_solve_container_cache","category":"page"},{"location":"DuctAPE/examples/#DuctAPE.allocate_solve_container_cache","page":"Examples","title":"DuctAPE.allocate_solve_container_cache","text":"allocate_solve_container_cache(\n    solve_type::SolverOptionsType,\n    paneling_constants::PanelingConstants;\n    fd_chunk_size=12,\n    levels=1,\n)\nallocate_solve_container_cache(\n    solve_type::SolverOptionsType,\n    problem_dimensions::ProblemDimensions;\n    fd_chunk_size=12,\n    levels=1,\n)\n\nAllocate the solve cache (used for intermediate calculations) based on paneling constants or problem dimensions.\n\nArguments\n\npaneling_constants::PanelingConstants : a PanelingConstants object\n\nOR\n\nproblem_dimensions::ProblemDimensions : a ProblemDimensions object\n\nKeyword Arguments\n\nfd_chunk_size::Int=12 : chunk size to use for PreallocationTools caches.  Note that the automated chuck size for DuctAPE will always be the ForwardDiff threshold of 12 due to the size of the system, so it will be best to leave this at the default unless further development allows for chunk size selection for individual solvers.\nlevels::Int=1 : levels for nested duals.  Note that since ImplicitAD is being used for all solves, there should be no need for more than 1 level.\n\nReturns\n\nsolve_container_caching::NamedTuple : a Named Tuple containing:\nsolve_container_cache::PreallocationTools.DiffCache : the cache\nsolve_container_cache_dims::NamedTuple : a named tuple containing the dimensions used for reshaping the cache when needed.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/examples/#Circumventing-the-Automated-Geometry-Re-paneling","page":"Examples","title":"Circumventing the Automated Geometry Re-paneling","text":"","category":"section"},{"location":"#DuctAPE.jl-[[Duct](#)ed-[A](#)xisymmetric-[P](#)ropulsor-[E](#)valuation]","page":"Home","title":"DuctAPE.jl [Ducted Axisymmetric Propulsor Evaluation]","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Authors: Judd Mehr,","category":"page"},{"location":"","page":"Home","title":"Home","text":"DuctAPE is a code for the aerodynamic evaluation of axisymmetric ducted propulsors designed for incompressible (low mach) applications. It is strongly influenced by the underlying theory of Ducted Fan Design Code (DFDC), utilizing a linear axisymmetric vortex panel method for duct and center body, blade element lifting line rotor representation, and psuedo wake-screw wake model axisymmetrically smeared onto an elliptic grid for efficient computation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DuctAPE has been developed specifically for applications in gradient-based optimization settings. <!– add citations later –> The selected solver methods have been chosen to balance code efficiency as well as robustness while simultaneously allowing for efficient automatic differentiation through DuctAPE employing ImplicitAD.jl. At the same time, the basic functionality of a DFDC-like solve approach has been maintained for the interested user.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As DuctAPE is not yet a registered package, if you have access to the development repository at this time you can add the package through Julia's package manager as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add \"https://github.com/byuflowlab/DuctAPE.jl\"","category":"page"},{"location":"DuctAPE/tutorial/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"Pages = [\"tutorial.md\"]\nDepth = 5","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The following is a basic tutorial on how to set up the inputs to, and run, an analysis of a ducted fan in DuctAPE.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"include(\"../../assets/plots_default.jl\")","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"We begin by loading the package, and optionally create a shorthand name.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"using DuctAPE\nconst dt = DuctAPE\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#Build-Inputs","page":"Getting Started","title":"Build Inputs","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The next step is to create the input object of type Propulsor.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.Propulsor","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.Propulsor-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.Propulsor","text":"Propulsor(duct_coordinates, centerbody_coordinates, rotorstator_parameters, operating_point, paneling_constants, reference_parameters)\n\nArguments\n\nduct_coordinates::AbstractMatrix : The [z, r] coordinates of the duct geometry beginning at the inner (casing) side trailing edge and proceeding clockwise. Note that the duct geometry absolute radial position does not need to be included here if the autoshiftduct option is selected.\ncenterbody_coordinates::AbstractMatrix : The [z, r] coordinates of the centerbody beginning at the leading edge and ending at the trailing edge. Note that the leading edge is assumed to be placed at a radial distance of 0.0 from the axis of rotation.\noperating_point::OperatingPoint : The operating point values.\npaneling_constants::PanelingConstants : Constants used in re-paneling the geometry.\nrotorstator_parameters::RotorStatorParameters : Rotor (and possibly stator) geometric paramters.\nreference_parameters::ReferenceParameters : Reference Parameters.\n\n\n\n\n\n","category":"type"},{"location":"DuctAPE/tutorial/#Body-Geometry","page":"Getting Started","title":"Body Geometry","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"We begin by defining a matrix of coordinates for the duct and another for the centerbody geometries, for example:","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"duct_coordinates = [\n    0.304466  0.158439\n    0.294972  0.158441\n    0.28113   0.158423\n    0.266505  0.158365\n    0.251898  0.158254\n    0.237332  0.158088\n    0.222751  0.157864\n    0.208123  0.157586\n    0.193399  0.157258\n    0.178507  0.156897\n    0.16349   0.156523\n    0.148679  0.156177\n    0.134222  0.155902\n    0.12      0.155721\n    0.106044  0.155585\n    0.092531  0.155498\n    0.079836  0.155546\n    0.067995  0.155792\n    0.057025  0.156294\n    0.046983  0.157103\n    0.037937  0.158256\n    0.029956  0.159771\n    0.02311   0.161648\n    0.017419  0.163862\n    0.012842  0.166404\n    0.009324  0.169289\n    0.006854  0.172546\n    0.005484  0.176154\n    0.005242  0.180005\n    0.006112  0.184067\n    0.00809   0.188086\n    0.011135  0.192004\n    0.015227  0.19579\n    0.020339  0.199393\n    0.026403  0.202735\n    0.033312  0.205736\n    0.040949  0.208332\n    0.049193  0.210487\n    0.057935  0.212174\n    0.067113  0.21339\n    0.076647  0.214136\n    0.086499  0.214421\n    0.09661   0.214255\n    0.10695   0.213649\n    0.117508  0.212618\n    0.12838   0.211153\n    0.139859  0.209267\n    0.151644  0.207051\n    0.163586  0.204547\n    0.175647  0.201771\n    0.187807  0.198746\n    0.20002   0.19549\n    0.212269  0.192017\n    0.224549  0.188335\n    0.236794  0.18447\n    0.249026  0.180416\n    0.261206  0.176188\n    0.273301  0.171796\n    0.28524   0.16727\n    0.29644   0.162842\n    0.304542  0.159526\n]\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"centerbody_coordinates = [\n    0.0       0.0\n    0.000586  0.005293\n    0.002179  0.010047\n    0.004736  0.014551\n    0.008231  0.018825\n    0.012632  0.022848\n    0.01788   0.026585\n    0.023901  0.030001\n    0.030604  0.033068\n    0.0379    0.035771\n    0.045705  0.038107\n    0.053933  0.040075\n    0.06254   0.04169\n    0.071451  0.042966\n    0.08063   0.043916\n    0.090039  0.044561\n    0.09968   0.044922\n    0.109361  0.044999\n    0.12      0.044952\n    0.135773  0.04495\n    0.151899  0.04493\n    0.16806   0.044913\n    0.184232  0.044898\n    0.200407  0.044882\n    0.21658   0.044866\n    0.232723  0.044847\n    0.248578  0.044839\n    0.262095  0.044564\n    0.274184  0.043576\n    0.285768  0.041795\n    0.296701  0.039168\n    0.306379  0.035928\n]\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"pg = plot(duct_coordinates[:,1], duct_coordinates[:,2], aspectratio=1, color=1, linewidth=2, label=\"Duct\", xlabel=\"z\", ylabel=\"r\", legend=:left) # hide\nplot!(pg, centerbody_coordinates[:,1], centerbody_coordinates[:,2], color=2, linewidth=2, label=\"Center Body\") # hide","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe body geometry coordinates must be input as columns of z (axial) and r (radial) coordinates, in that order.","category":"page"},{"location":"DuctAPE/tutorial/#Rotor-Geometry","page":"Getting Started","title":"Rotor Geometry","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The next step is to assemble an object of type RotorStatorParameters which contains the geometric information required to define the rotor(s) and their respective blade elements.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.RotorStatorParameters","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.RotorStatorParameters-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.RotorStatorParameters","text":"RotorStatorParameters(\n    B, rotorzloc, r, Rhub, Rtip, chords, twists, tip_gap, airfoils, fliplift\n)\n\nComposite type containing the rotor(s) geometric properties.\n\nNote that the actual struct requires the inputs to be arrays, but there is a constructor function that will take in scalars and automatically build the array-based struct.\n\nArguments\n\nB::AbstractVector{Float} : The number of blades for each rotor. May not be an integer, but usually is.\nrotorzloc::AbstractVector{Float} : Dimensional, axial position of each rotor.\nr::AbstractArray{Float} : Non-dimensional radial locations of each blade element.\nRhub::AbstractVector{Float} : Dimensional hub radius of rotor. (may be changed if it does not match the radial position of the centerbody geometry at the selected rotorzloc.\nRtip::AbstractVector{Float} : Dimensional tip radius of rotor. Is used to determine the radial position of the duct if the autoshiftduct option is selected.\nchords::AbstractArray{Float} : Dimensional chord lengths of the blade elements.\ntwists::AbstractArray{Float} : Blade element angles, in radians.\ntip_gap::AbstractVector{Float} : Currently unused, do not set to anything other than zeros.\nairfoils::AbstractArray{AFType} : Airfoil types describing the airfoil polars for each blade element. Currently only fully tested with C4Blade.DFDCairfoil types.\nfliplift::AbstractVector{Bool} : flag to indicate if the airfoil lift values should be flipped or not.\n\n\n\n\n\n","category":"type"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"In this example, we have a single rotor defined as follows.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"B = 5\n\nrotorzloc = 0.12\n\nRtip = 0.15572081487373543\n\nRhub = 0.04495252299071941\n\nr = [\n    0.050491\n    0.061567\n    0.072644\n    0.083721\n    0.094798\n    0.10587\n    0.11695\n    0.12803\n    0.13911\n    0.15018\n]./Rtip\n\nchords = [\n    0.089142\n    0.079785\n    0.0713\n    0.063979\n    0.057777\n    0.052541\n    0.048103\n    0.044316\n    0.041061\n    0.038243\n]\n\ntwists = [\n    69.012\n    59.142\n    51.825\n    46.272\n    41.952\n    38.509\n    35.699\n    33.354\n    31.349\n    29.596\n].*pi/180.0\n\n\nafparams = DuctAPE.c4b.DFDCairfoil(;\n    alpha0=0.0,\n    clmax=1.5,\n    clmin=-1.0,\n    dclda=6.28,\n    dclda_stall=0.5,\n    dcl_stall=0.2,\n    cdmin=0.012,\n    clcdmin=0.1,\n    dcddcl2=0.005,\n    cmcon=0.0,\n    Re_ref=2e5,\n    Re_exp=0.35,\n    mcrit=0.7,\n)\n\nairfoils = fill(afparams, length(r)) # specify the airfoil array\n\nrotorstator_parameters = dt.RotorStatorParameters(\n    [B],\n    [rotorzloc],\n    r,\n    [Rhub],\n    [Rtip],\n    chords,\n    twists,\n    [0.0], # currently only zero tip gaps work.\n    airfoils,\n    [0.0], # can flip the cl lookups on the fly if desired, say, for stator sections\n)\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"plot!(pg, rotorzloc*ones(length(r)), r.*Rtip, seriestype=:scatter, markerstrokewidth=0, label=\"Blade Elements\") # hide","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"note: Airfoils\nAirfoil types for DuctAPE are currently contained in the C4Blade (Cascade Compatible CCBlade) sub-module of DuctAPE which is exported as c4b and also contains the various airfoil evaluation functions used for the blade element lookups. The available airfoil types include all the airfoil types from CCBlade, as well as DFDCairfoil which is an XROTOR-like parametric cascade polar used in DFDC. In addition there are untested cascade types with similar structure to CCBlades airfoil types called DTCascade. Furthermore, there is an experimental actuator disk model implemented via the ADM airfoil type in C4Blade.","category":"page"},{"location":"DuctAPE/tutorial/#Operating-Point","page":"Getting Started","title":"Operating Point","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"Next we will assemble the operating point which contains information about the freestream as well as the rotor rotation rate(s).","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.OperatingPoint","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.OperatingPoint-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.OperatingPoint","text":"OperatingPoint(Vinf, rhoinf, muinf, asound, Omega)\n\nPropulsor operating point information.\n\nNote that the actual struct requires the inputs to be arrays, but there is a constructor function that will take in scalars and automatically build the array-based struct.\n\nAlso note that even though each field is required to be a vector, only Omega should have more than one entry, and only then if there are more than one rotor.  The purpose behind having vector rather than constant scalar inputs here is for ease of redefinition in an optimization setting when freestream design variables may be present.\n\nArguments\n\nVinf::AbstractVector{Float} : Freestream velocity magnitude (which is only in the axial direction).\nrhoinf::AbstractVector{Float} : Freestream density\nmuinf::AbstractVector{Float} : Freestream viscosity\nasound::AbstractVector{Float} : Freestream speed of sound\nOmega::AbstractVector{Float} : Rotor rototation rate(s)\n\n\n\n\n\n","category":"type"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"# Freestream\nVinf = 0.0 # hover condition\nrhoinf = 1.226\nasound = 340.0\nmuinf = 1.78e-5\n\n# Rotation Rate\nRPM = 8000.0\nOmega = RPM * pi / 30 # if using RPM, be sure to convert to rad/s\n\n# utilizing the constructor function to put things in vector types\noperating_point = dt.OperatingPoint(Vinf, rhoinf, muinf, asound, Omega)\n\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#Paneling-Constants","page":"Getting Started","title":"Paneling Constants","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The PanelingConstants object contains the constants required for DuctAPE to re-panel the provided geometry into a format compatible with the solve structure. The PanelingConstants object is also used to build all of the preallocated caches inside DuctAPE, which can be done up-front if desired. Note that there is some functionality in place for cases when the user wants to keep their own specified geometry, but this functionality should be used with caution and only by users who are certain their provided geometry is in the compatible format.  See the Examples for an example.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.PanelingConstants","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.PanelingConstants-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.PanelingConstants","text":"PanelingConstants(\n    nduct_inlet,\n    ncenterbody_inlet,\n    npanels,\n    dte_minus_cbte,\n    nwake_sheets,\n    wake_length=1.0,\n)\n\nConstants used in re-paneling geometry.\n\nNote that unlike other input structures, this one, in general, does not define fields as vectors.  This is because these values should not change throughout an optimization, even if the geometry may change.  Otherwise, discontinuities could be experienced.\n\nArguments\n\nnduct_inlet::Int : The number of panels to use for the duct inlet (this number is used for both the casing and nacelle re-paneling)\nncenterbody_inlet::Int : The number of panels to use for the centerbody inlet.\nnpanels::AbstractVector{Int} : A vector containing the number of panels between discrete locations inside the wake. Specifically, the number of panels between the rotors, between the last rotor and the first body trailing edge, between the body trailing edges (if different), and between the last body trailing edge and the end of the wake.  The length of this vector should be N+1 (where N is the number of rotors) if the duct and centerbody trailing edges are aligned, and N+2 if not.\ndte_minus_cbte::Float : An indicator concerning the hub and duct trailing edge relative locations. Should be set to -1 if the duct trailing edge axial position minus the centerbody trailing edge axial position is negative, +1 if positive (though any positive or negative number will suffice), and zero if the trailing edges are aligned.\nnwake_sheets::Int : The number of wake sheets to use. Note this will also be setting the number of blade elements to use.\nwake_length::Float=1.0 : Non-dimensional (based on the length from the foremost body leading edge and the aftmost body trailing edge) length of the wake extending behind the aftmost body trailing edge.\n\n\n\n\n\n","category":"type"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"nduct_inlet = 30\nncenterbody_inlet = 30\nnpanels = [30, 1, 30] # the 1 is due to the fact that the duct and center body trailing edges are not quite aligned.\ndte_minus_cbte = -1.0 # the duct trailing edge is ahead of the centerbody trailing edge.\nnwake_sheets = 11\nwake_length = 0.8\n\npaneling_constants = dt.PanelingConstants(\n    nduct_inlet, ncenterbody_inlet, npanels, dte_minus_cbte, nwake_sheets, wake_length\n)\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#Reference-Parameters","page":"Getting Started","title":"Reference Parameters","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The reference parameters are used in the post-processing non-dimensionalizations.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.ReferenceParameters","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.ReferenceParameters-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.ReferenceParameters","text":"ReferenceParameters(Vref, Rref)\n\nReference parameters for post-process non-dimensionalization.\n\nNote that the actual struct requires the inputs to be arrays, but there is a constructor function that will take in scalars and automatically build the array-based struct.\n\nArguments\n\nVref::AbstractVector{Float} : Reference velocity.\nRref::AbstractVector{Float} : Reference rotor tip radius.\n\n\n\n\n\n","category":"type"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"Vref = 50.0 #this turns out to be close to the average axial velocity at the rotor in our case\nRref = Rtip\n\nreference_parameters = dt.ReferenceParameters([Vref], [Rref])\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#All-Together","page":"Getting Started","title":"All Together","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"We are now posed to construct the Propulsor input type.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"propulsor = dt.Propulsor(\n    duct_coordinates,\n    centerbody_coordinates,\n    rotorstator_parameters,\n    operating_point,\n    paneling_constants,\n    reference_parameters,\n)\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#Set-Options","page":"Getting Started","title":"Set Options","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"The default options should be sufficient for just starting out and are set through the set_options function.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.set_options","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.set_options-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.set_options","text":"set_options(; kwargs...)\nset_options(multipoint; kwargs...)\n\nSet the options for DuctAPE to use.\n\nNote that the vast majority of the available options are defined through keyword arguments.  See the documentation for the various option types for more information.\n\nArguments\n\nmultipoint::AbstractVector{OperatingPoint} : a vector of operating points to use if running a multi-point analysis.\n\n\n\n\n\n","category":"function"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"options = dt.set_options()","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"For more advanced option selection, see the examples and API reference.","category":"page"},{"location":"DuctAPE/tutorial/#Run-Analysis","page":"Getting Started","title":"Run Analysis","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"With the propulsor input build, and the options selected, we are now ready to run an analysis. This is done simply with the analyze function which dispatches the appropriate analysis, solve, and post-processing functions based on the selected options.","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"DuctAPE.analyze(::DuctAPE.Propulsor, ::DuctAPE.Options)","category":"page"},{"location":"DuctAPE/tutorial/#DuctAPE.analyze-Tuple{DuctAPE.Propulsor, DuctAPE.Options}-DuctAPE-tutorial","page":"Getting Started","title":"DuctAPE.analyze","text":"analyze(\n    propulsor::Propulsor,\n    options::Options=set_options();\n    prepost_container_caching=nothing,\n    solve_parameter_caching=nothing,\n    solve_container_caching=nothing,\n    return_inputs=false,\n)\n\nAnalyze propulsor, including preprocessing.\n\nArguments\n\npropulsor::Propulsor : Propulsor input object (see docstring for Propulsor type)\noptions::Options=set_options() : Options object (see set_options and related functions)\n\nKeyword Arguments\n\nprepost_container_caching=nothing : Output of allocate_prepost_container_cache\nsolve_parameter_caching=nothing : Output of allocate_solve_parameter_container_cache\nsolve_container_caching=nothing : Output of allocate_solve_container_cache\nreturn_inputs=false : flag as to whether or not to return the pre-processed inputs\n\nReturns\n\nouts::NamedTuple : Named Tuple of various analysis outputs (see docstring for postprocess for details), note, if linear system decomposition fails, no solve is performed and an empty vector is returned.\nins::NamedTuple : Named Tuple of various pre-processed inputs (e.g. panels and body linear system), will only be returned if return_inputs=true\nconvergence_flag : Flag for successful solve convergence\n\n\n\n\n\n","category":"method"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"outs, success_flag = dt.analyze(propulsor, options)\nnothing # hide","category":"page"},{"location":"DuctAPE/tutorial/#Outputs","page":"Getting Started","title":"Outputs","text":"","category":"section"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"There are many outputs contained in the named tuple output from the analyze function (see the post_process() docstring), but some that may be of immediate interest include:","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"# Total Thrust Coefficient\nouts.totals.CT","category":"page"},{"location":"DuctAPE/tutorial/","page":"Getting Started","title":"Getting Started","text":"# Total Torque Coefficient\nouts.totals.CQ","category":"page"}]
}
