
%%% Preamble Requirements %%%
% \usepackage{geometry}
% \usepackage{amsfonts}
% \usepackage{amsmath}
% \usepackage{amssymb}
% \usepackage{tikz}

% Optional packages such as sfmath set through python interface
% \usepackage{sfmath}

% \usetikzlibrary{arrows,chains,positioning,scopes,shapes.geometric,shapes.misc,shadows}

%%% End Preamble Requirements %%%

\input{"/usr/local/lib/python3.11/site-packages/pyxdsm/diagram_styles"}
\begin{tikzpicture}

\matrix[MatrixSetup]{
%Row 0
&
\node [DataIO] (output_pre) {$\text{Geometry, Operating Conditions}$};&
&
&
&
&
&
\\
%Row 1
&
\node [Function] (pre) {$\text{Pre-computation}$};&
\node [DataInter] (pre-solve) {$\gamma_b^{(o)},\Gamma_r^{(o)},\sigma_r^{(o)},\gamma_w^{(o)}$};&
\node [DataInter] (pre-body) {$L, U, \text{AIC's}$};&
\node [DataInter] (pre-rotor) {$\text{Blade Elements}$};&
\node [DataInter] (pre-wake) {$\text{``Grid''}$};&
\node [DataInter] (pre-post) {$\text{Geometry, Operating Condtions}$};&
\\
%Row 2
&
&
\node [MDA] (solve) {$\text{Non-Linear Solve}$};&
\node [DataInter] (solve-body) {$\gamma_b, \gamma_w, \sigma_r$};&
\node [DataInter] (solve-rotor) {$\gamma_b, \Gamma_r, \sigma_r, \gamma_w$};&
\node [DataInter] (solve-wake) {$\gamma_b, \Gamma_r, \sigma_r, \gamma_w$};&
&
\\
%Row 3
&
&
\node [DataInter] (body-solve) {$\gamma_b^*$};&
\node [Function] (body) {$\text{Body Aero}$};&
&
&
\node [DataInter] (body-post) {$\gamma_b^*$};&
\\
%Row 4
&
&
\node [DataInter] (rotor-solve) {$\Gamma_r^*, \sigma_r^*$};&
&
\node [Function] (rotor) {$\text{Rotor(s) Aero}$};&
&
\node [DataInter] (rotor-post) {$\Gamma_r^*, \sigma_r^*$};&
\\
%Row 5
&
&
\node [DataInter] (wake-solve) {$\gamma_w^*$};&
&
&
\node [Function] (wake) {$\text{Wake Aero}$};&
\node [DataInter] (wake-post) {$\gamma_w^*$};&
\\
%Row 6
&
\node [DataIO] (left_output_post) {$\text{Aero Performance, Blade Loads}$};&
&
&
&
&
\node [Function] (post) {$\text{Post-process}$};&
\\
%Row 7
&
&
&
&
&
&
&
\\
};

% XDSM process chains


\begin{pgfonlayer}{data}
\path
% Horizontal edges
(solve) edge [DataLine] (solve-body)
(body) edge [DataLine] (body-post)
(body) edge [DataLine] (body-solve)
(body) edge [DataLine] (body-solve)
(solve) edge [DataLine] (solve-rotor)
(rotor) edge [DataLine] (rotor-post)
(rotor) edge [DataLine] (rotor-solve)
(solve) edge [DataLine] (solve-wake)
(wake) edge [DataLine] (wake-post)
(wake) edge [DataLine] (wake-solve)
(pre) edge [DataLine] (pre-post)
(pre) edge [DataLine] (pre-body)
(pre) edge [DataLine] (pre-rotor)
(pre) edge [DataLine] (pre-wake)
(pre) edge [DataLine] (pre-solve)
(post) edge [DataLine] (left_output_post)
% Vertical edges
(solve-body) edge [DataLine] (body)
(body-post) edge [DataLine] (post)
(body-solve) edge [DataLine] (solve)
(body-solve) edge [DataLine] (solve)
(solve-rotor) edge [DataLine] (rotor)
(rotor-post) edge [DataLine] (post)
(rotor-solve) edge [DataLine] (solve)
(solve-wake) edge [DataLine] (wake)
(wake-post) edge [DataLine] (post)
(wake-solve) edge [DataLine] (solve)
(pre-post) edge [DataLine] (post)
(pre-body) edge [DataLine] (body)
(pre-rotor) edge [DataLine] (rotor)
(pre-wake) edge [DataLine] (wake)
(pre-solve) edge [DataLine] (solve)
(pre) edge [DataLine] (output_pre);
\end{pgfonlayer}

\end{tikzpicture}
